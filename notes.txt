Note: validations are for the model.  Constraints are defined inside migrations.


https://github.com/appacademy/curriculum/blob/master/sql/projects/url_shortener/solution/db/migrate/20170708074429_create_shortened_urls.rb

is a good reference for migrations



Questions:
  1.  Should it be save! or save in user.  I think save! to create errors.



 user = User.new({username: 'abc'})

1. make account
2. login
3. establish remote
4. build packs in setting, node.js, THEN ruby
5. then in package JSON add "postinstall" "webpack"
6. then go to engines and check version of npm and node



7. you have to run migrations to get it to heroku
8. heroku run should go first


1. be careful about cSS
you can't drop the database, you can only migrate and seed


migrate and seed

I put this in application.js --> //= require jquery
remember that if it is gem testing and not in development/test it can be available everywhere


Note: error messages in the model are from the JSON


$.ajax({method: 'POST', url: '/api/users', data: { user: { username: 'chewbacca', password: 'starwars' }}});


Would love to use helpers and understand what those do


Note we should make filnames in snake, and the name of the stuff in the file in camel



//Questions--how is provider getting access to the store?


1073
down vote
accepted
db:migrate runs (single) migrations that have not run yet.
db:create creates the database
db:drop deletes the database
db:schema:load creates tables and columns within the (existing) database following schema.rb

db:setup does db:create, db:schema:load, db:seed

db:reset does db:drop, db:setup
Typically, you would use db:migrate after having made changes to the schema via new migration files (this makes sense only if there is already data in the database). db:schema:load is used when you setup a new instance of your app.

I hope that helps.
//why are we passing ownProps through dispatch? Is this so I can access it in the actual form?



NOTE: we have not yet run the command form npm-install save yet.

Questions: why do we keep getting that on SIGNIN?

Warning: Hash history cannot PUSH the same path; a new entry will not be added to the history stack



Questions on a) debuggers, b) rails console, c) me needing to reload the server each time

Use kill -9 $(lsof -i tcp:3000 -t) if you get a stupid server error


Note the reason why params are nested is because in the AJAX request

we pass for data an object of user WITH keys to e_mail and password


Always have model level validations above the database



1. Must run NPM install on machine when cloning.


display flex makes the HTML element a flex container
all top level children in flex container become flex items. Only the flex items are flexed by the container.

CSS flex properties: some are designed for children;
some are designed for parents--refer to MDM docs.

1. Let's avoid having an array

a. optons

Book.destroy_all removes everything from the database


Give default values to a container's items so that they have a value when you display them





class CreateReviews < ActiveRecord::Migration[5.1]
  def change
    create_table :reviews do |t|
      t.integer :user_id
      t.integer :book_id
      t.string :body
      t.integer :rating
      t.timestamps
    end
    add_index :reviews, :book_id
  end
end


Note, we ran this migration



Keep in mind the partial for the review view could be messed up

export const receiveReviews = payload => ({
  type: RECEIVE_REVIEWS,
  reviews: payload.reviews,
  users: payload.users
});


option a is just putting additional keys on the front end review
option b is having a separate slice of state for them



const review = {user_id: 2, book_id: 4, body: "I'm not sure I agree with Sasha's rating.  The use of anaphora was frankly off putting, and made me consider whether or not I should be consuming more Chipotle", rating: 2};
